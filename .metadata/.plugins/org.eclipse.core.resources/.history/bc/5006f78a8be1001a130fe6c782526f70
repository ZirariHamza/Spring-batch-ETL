package com.java.project.config;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Vector;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.LineMapper;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.Resource;

import com.java.project.model.Logs;
import com.java.project.model.employee;
import com.java.project.repository.LogRepository;

@Configuration
@EnableBatchProcessing
public class SpringBatchConfig {
	
	@Autowired
	private LogRepository logRepository;
	
	@Bean
	public Job job(JobBuilderFactory jobBuilderFactory,
			StepBuilderFactory stepBuilderFactory,
			ItemReader<employee> itemReader,
			ItemProcessor<employee, employee> itemProcessor,
			ItemWriter<employee> itemWriter
			) {
		
		Step step = stepBuilderFactory.get("ETL-file-load")
				.<employee, employee>chunk(100)
				.reader(itemReader)
				.processor(itemProcessor)
				.writer(itemWriter)
				.build();
		
		
		return jobBuilderFactory.get("ETL-Load")
				.incrementer(new RunIdIncrementer())
				.start(step)
				.build();
	}
	
	
	@Bean
	public FlatFileItemReader<employee> fileItemReader(@Value("employee.txt") Resource resource) {
			FlatFileItemReader<employee> flatFileItemReader = new FlatFileItemReader<>();
			flatFileItemReader.setResource(resource);
			flatFileItemReader.setName("TXT-Reader");
			flatFileItemReader.setLinesToSkip(1);
			flatFileItemReader.setLineMapper(lineMapper());
			return flatFileItemReader;
		
	}
	
	@Bean
	public LineMapper<employee> lineMapper() {
		try {
			DefaultLineMapper<employee> defaultLineMapper = new DefaultLineMapper<>();
			DelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();
			
			lineTokenizer.setDelimiter(",");
			lineTokenizer.setStrict(false);
			lineTokenizer.setNames(new String[] {"id", "name", "dept", "salary"});
			
			BeanWrapperFieldSetMapper<employee> fieldSetMapper = new BeanWrapperFieldSetMapper<>();
			fieldSetMapper.setTargetType(employee.class);
			
			defaultLineMapper.setLineTokenizer(lineTokenizer);
			defaultLineMapper.setFieldSetMapper(fieldSetMapper);
			
			return defaultLineMapper;
		} catch (Exception e) {
			System.out.println("Error here : " + e);
			return null;
		}
		
	}
}
